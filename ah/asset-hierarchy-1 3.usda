#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.00000397803842133726, 0.000007956076785831101, -0.000003978038307650422)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./Trees.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            bool "rtx:useViewLightingMode" = 1
        }
    }
)

def Scope "Microsoft" {

    def Scope "Data" {

        def Scope "Types" {
    
            class DataType "HierarchyEntity"
            {
                custom string name = "Entity"
                custom string type = "Entity"
                custom string twinId = "entity_1"
                custom string label = "Entity"
                custom string description = "An entity"    
            }

            class DataType "EnterpriseEntity"
            (
                inherits = </HierarchyEntity>
            )
            {
                custom string type = "EnterpriseEntity"
            }

            class DataType "CompanyEntity"
            (
                inherits = </HierarchyEntity>
            )
            {
                custom string type = "CompanyEntity"
            }

            class DataType "SiteEntity"
            (
                inherits = </HierarchyEntity>
            )
            {
                custom string type = "SiteEntity"

                custom string address = "123 Main St"
                custom string city = "Redmond"
                custom string state = "WA"

            }

            class DataType "AssetEntity"
            (
                inherits = </HierarchyEntity>
            )
            {
                custom string type = "AssetEntity"

                custom string manufacturer = "Contoso"
                custom string model = "Oven 1"
                custom string serialNumber = "12345"

                custom string hardwareVersion = "1.0"
                custom string softwareVersion = "1.0"

            }

            class DataType  "SensorEntity"
            (
                inherits = </HierarchyEntity>
            )
            {
                custom string type = "SensorEntity"
                custom string value = "0"
                custom string unit = "Celsius"
                custom string dataType = "Double"
                custom string sourceTimeStamp = "2020-01-01T00:00:00Z"

            }

        }
    }
}
 
def Scope "World" {
 
    def Enterprise "Contoso_Bakeries" (
        inherits = </Microsoft/Data/Types/EnterpriseEntity>

    )
    {
        double3 xformOp:translate = (0.4, -0.5, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
        
        def Site "Bakery" (
            inherits = </Microsoft/Data/Types/SiteEntity>
        )
        {

            def Asset "Oven" (
                inherits = </Microsoft/Data/Types/AssetEntity>
            )
            {
                double3 xformOp:translate = (0.4, 0.5, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def Sensor "Temperature" (
                    inherits = </Microsoft/Data/Types/SensorEntity>
                )
                {
                    double3 xformOp:translate = (0.4, 0.5, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }
            }
        } 
    }  
}